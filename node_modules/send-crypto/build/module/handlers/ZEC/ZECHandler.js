import * as bitcoin from "bitgo-utxo-lib";
import BigNumber from "bignumber.js";
import { List } from "immutable";
import { Insight } from "../../common/apis/insight";
import { Sochain } from "../../common/apis/sochain";
import { BitgoUTXOLib } from "../../common/libraries/bitgoUtxoLib";
import { subscribeToConfirmations } from "../../lib/confirmations";
import { newPromiEvent } from "../../lib/promiEvent";
import { fallback, retryNTimes } from "../../lib/retry";
import { shuffleArray } from "../../lib/utils";
import { JSONRPC, MULTICHAIN_URLS } from "../../common/apis/jsonrpc";
var InsightEndpoints;
(function (InsightEndpoints) {
    // Testnet
    InsightEndpoints["TestnetZCash"] = "https://explorer.testnet.z.cash/api/";
    // Mainnet
    InsightEndpoints["ZCash"] = "https://explorer.z.cash/api/";
    InsightEndpoints["ZecBlockExplorer"] = "https://zecblockexplorer.com/api/";
    InsightEndpoints["ZecChain"] = "https://zechain.net/api/v1/";
    InsightEndpoints["BlockExplorer"] = "https://zcash.blockexplorer.com/api/";
})(InsightEndpoints || (InsightEndpoints = {}));
export const _apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => testnet
        ? [
            ...shuffleArray(() => Insight.fetchUTXO(InsightEndpoints.TestnetZCash)(txHash, vOut)),
            () => Sochain.fetchUTXO("ZECTEST")(txHash, vOut),
        ]
        : [
            ...shuffleArray(() => Insight.fetchUTXO(InsightEndpoints.ZCash)(txHash, vOut), () => Insight.fetchUTXO(InsightEndpoints.ZecBlockExplorer)(txHash, vOut)),
            () => Insight.fetchUTXO(InsightEndpoints.ZecChain)(txHash, vOut),
            () => Insight.fetchUTXO(InsightEndpoints.BlockExplorer)(txHash, vOut),
        ],
    fetchUTXOs: (testnet, address, confirmations) => testnet
        ? [
            ...shuffleArray(() => Insight.fetchUTXOs(InsightEndpoints.TestnetZCash)(address, confirmations)),
            () => Sochain.fetchUTXOs("ZECTEST")(address, confirmations),
        ]
        : [
            ...shuffleArray(() => Insight.fetchUTXOs(InsightEndpoints.ZCash)(address, confirmations), () => Insight.fetchUTXOs(InsightEndpoints.ZecBlockExplorer)(address, confirmations)),
            () => Sochain.fetchUTXOs("ZEC")(address, confirmations),
            () => Insight.fetchUTXOs(InsightEndpoints.ZecChain)(address, confirmations),
            () => Insight.fetchUTXOs(InsightEndpoints.BlockExplorer)(address, confirmations),
        ],
    fetchTXs: (testnet, address, confirmations = 0) => testnet
        ? [
            ...shuffleArray(() => Insight.fetchTXs(InsightEndpoints.TestnetZCash)(address, confirmations)),
            () => Sochain.fetchTXs("ZECTEST")(address, confirmations),
        ]
        : [
            ...shuffleArray(() => Insight.fetchTXs(InsightEndpoints.ZCash)(address, confirmations), () => Insight.fetchTXs(InsightEndpoints.ZecBlockExplorer)(address, confirmations)),
            () => Sochain.fetchTXs("ZEC")(address, confirmations),
            () => Insight.fetchTXs(InsightEndpoints.ZecChain)(address, confirmations),
            () => Insight.fetchTXs(InsightEndpoints.BlockExplorer)(address, confirmations),
        ],
    broadcastTransaction: (testnet, hex) => testnet
        ? [
            () => JSONRPC.broadcastTransaction(MULTICHAIN_URLS.ZECTEST)(hex),
            () => Insight.broadcastTransaction(InsightEndpoints.TestnetZCash)(hex),
            () => Sochain.broadcastTransaction("ZECTEST")(hex),
        ]
        : [
            ...shuffleArray(() => Insight.broadcastTransaction(InsightEndpoints.ZCash)(hex), () => Insight.broadcastTransaction(InsightEndpoints.ZecBlockExplorer)(hex), () => Sochain.broadcastTransaction("ZEC")(hex)),
            () => Insight.broadcastTransaction(InsightEndpoints.ZecChain)(hex),
            () => Insight.broadcastTransaction(InsightEndpoints.BlockExplorer)(hex),
            () => JSONRPC.broadcastTransaction(MULTICHAIN_URLS.ZEC)(hex),
        ],
};
export class ZECHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["ZEC", "ZCASH"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await ZECHandler.getUTXOs(this.testnet, {
                ...options,
                address: (options && options.address) || (await this.address(asset)),
            });
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new BigNumber(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = List(await ZECHandler.getUTXOs(this.testnet, {
                    ...options,
                    address: fromAddress,
                }))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                if (this.testnet) {
                    // tslint:disable-next-line: no-object-mutation
                    bitcoin.networks.zcashTest.consensusBranchId["4"] = 0xe9ff75a6;
                }
                const built = await BitgoUTXOLib.buildUTXO(this.testnet
                    ? bitcoin.networks.zcashTest
                    : bitcoin.networks.zcash, this.privateKey, changeAddress, to, valueIn, utxos, {
                    ...options,
                    version: 4,
                    versionGroupID: 0x892f2085,
                    consensusBranchId: 0xe9ff75a6,
                });
                txHash = await retryNTimes(() => fallback(_apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = async (txHash) => (await fallback(
        // Fetch confirmations for first output of transaction.
        _apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations;
        this.testnet = network !== "mainnet";
        this.privateKey = BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.zcashTest : bitcoin.networks.zcash, privateKey);
    }
}
ZECHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    return fallback(_apiFallbacks.fetchUTXOs(testnet, options.address, confirmations));
};
ZECHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = _apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return fallback(endpoints);
};
ZECHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = _apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return fallback(endpoints);
};
//# sourceMappingURL=data:application/json;base64,