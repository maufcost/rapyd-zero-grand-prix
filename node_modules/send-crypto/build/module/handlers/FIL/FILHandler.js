import BigNumber from "bignumber.js";
import { Message } from "@glif/filecoin-message";
import Filecoin from "@glif/filecoin-wallet-provider";
import { Network as FilNetwork } from "@glif/filecoin-address";
import { newPromiEvent } from "../../lib/promiEvent";
import { sleep } from "../../lib/retry";
import { SingleKeyProvider } from "./provider";
export class FILHandler {
    constructor(privateKey, network, options = {}, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["FIL", "FILECOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, _options = {}) => {
            if (!this.handlesAsset(asset)) {
                throw new Error(`Asset ${asset} not supported.`);
            }
            const accounts = await this.sharedState.filecoin.wallet.getAccounts(0, 1, this.network);
            return accounts[0];
        };
        // Balance
        this.getBalance = async (asset, options = {}) => new BigNumber(await this.sharedState.filecoin.getBalance((options && options.address) || (await this.address(asset))));
        this.getBalanceInSats = async (asset, options = {}) => (await this.getBalance(asset, options)).multipliedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        // Transfer
        this.send = (to, value, asset, options = {}) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options = {}) => {
            const promiEvent = newPromiEvent();
            (async () => {
                const address = await this.address(asset);
                const nonce = await this.sharedState.filecoin.getNonce(address);
                let value = valueIn;
                let message = new Message({
                    to,
                    from: address,
                    value: valueIn,
                    method: 0,
                    gasFeeCap: 0,
                    gasLimit: 0,
                    gasPremium: 0,
                    nonce,
                    params: undefined,
                    ...options,
                });
                message = await this.sharedState.filecoin.gasEstimateMessageGas(message.toLotusType());
                if (options.subtractFee) {
                    const { maxFee: fee, } = await this.sharedState.filecoin.gasEstimateMaxFee(message.toLotusType());
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const signed = await this.sharedState.filecoin.wallet.sign(address, message.toLotusType());
                const tx = await this.sharedState.filecoin.sendMessage(signed.Message, signed.Signature.Data);
                const txHash = tx["/"];
                promiEvent.emit("transactionHash", txHash);
                while (true) {
                    const result = await this.sharedState.filecoin.jsonRpcEngine.request("StateSearchMsg", tx);
                    /*
                    {
                        Message: {
                            '/': 'bafy2bzacedtcalpfb5dj3de6jb5lfncqtxw4kia4xotpg3on3p7gcesiwlube'
                        },
                        Receipt: { ExitCode: 0, Return: null, GasUsed: 433268 },
                        ReturnDec: null,
                        TipSet: [
                            {
                            '/': 'bafy2bzacedsqymqnjl2oir7q2rgbwyqscihvebkvr7hfzdq5b2tvcct3cwczy'
                            },
                            {
                            '/': 'bafy2bzacednrjqbsyooob3f76wwct4iupauehvq6wnzrbf6uc4dskptwu4er6'
                            },
                            {
                            '/': 'bafy2bzaceany2in5cadbyf27mecnmzc6ustqfewd5dobxquidzbn3wtnjd52y'
                            }
                        ],
                        Height: 53025
                    }
                    */
                    if (result) {
                        promiEvent.emit("confirmation", 1);
                        break;
                    }
                    await sleep(10 * 1000);
                }
                promiEvent.resolve(txHash);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        const filecoin = new Filecoin(SingleKeyProvider(privateKey), {
            apiAddress: options && options.apiAddress,
            token: options && options.token,
        });
        this.network =
            network === "mainnet" ? FilNetwork.MAIN : FilNetwork.TEST;
        sharedState.filecoin = filecoin;
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRklMSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9GSUwvRklMSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sUUFBUSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLElBQUksVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0QsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFjL0MsTUFBTSxPQUFPLFVBQVU7SUFXbkIsWUFDSSxVQUFrQixFQUNsQixPQUFlLEVBQ2YsVUFBOEIsRUFBRSxFQUNoQyxXQUFpQjtRQVZKLGFBQVEsR0FBRyxFQUFFLENBQUM7UUF3Qi9CLG1EQUFtRDtRQUNuQyxpQkFBWSxHQUFHLENBQUMsS0FBWSxFQUFXLEVBQUUsQ0FDckQsT0FBTyxLQUFLLEtBQUssUUFBUTtZQUN6QixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFNUMsWUFBTyxHQUFHLEtBQUssRUFDM0IsS0FBWSxFQUNaLFdBQTJCLEVBQUUsRUFDZCxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3BEO1lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxD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