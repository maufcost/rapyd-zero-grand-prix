"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const BCHHandler_1 = require("./handlers/BCH/BCHHandler");
const BTCHandler_1 = require("./handlers/BTC/BTCHandler");
const ERC20Handler_1 = require("./handlers/ERC20/ERC20Handler");
const ETHHandler_1 = require("./handlers/ETH/ETHHandler");
const FILHandler_1 = require("./handlers/FIL/FILHandler");
const TERRAHandler_1 = require("./handlers/TERRA/TERRAHandler");
const ZECHandler_1 = require("./handlers/ZEC/ZECHandler");
const utils_1 = require("./lib/utils");
class CryptoAccount {
    constructor(privateKey, options) {
        this.handlers = [];
        this.registerHandler = (handlerClass, priorityIn) => {
            const priority = priorityIn === undefined
                ? this.handlers.length === 0
                    ? 0
                    : this.handlers[this.handlers.length - 1].priority
                : priorityIn;
            const lastPosition = this.handlers.reduce((index, item, currentIndex) => item.priority <= priority ? currentIndex + 1 : index, 0);
            this.handlers.splice(lastPosition, 0, {
                handler: new handlerClass(this.privateKey, this.network, this.constructorOptions, this.sharedState),
                priority,
            });
        };
        this.address = async (assetIn, options) => {
            const asset = assetIn || this.defaultAsset;
            if (!asset) {
                throw new Error(`Must provide an asset`);
            }
            return this.deferHandler().address(asset, options);
        };
        this.getBalance = async (assetIn, options) => {
            const asset = assetIn || this.defaultAsset;
            if (!asset) {
                throw new Error(`Must provide an asset`);
            }
            const bn = await this.deferHandler().getBalance(asset, options);
            return (options && options.bn
                ? new options.bn(bn.toFixed())
                : bn.toNumber());
        };
        // tslint:disable-next-line: member-ordering
        this.balanceOf = this.getBalance;
        this.getBalanceInSats = async (assetIn, options) => {
            const asset = assetIn || this.defaultAsset;
            if (!asset) {
                throw new Error(`Must provide an asset`);
            }
            const bn = await this.deferHandler().getBalanceInSats(asset, options);
            return (options && options.bn
                ? new options.bn(bn.toFixed())
                : bn.toNumber());
        };
        // tslint:disable-next-line: member-ordering
        this.balanceOfInSats = this.getBalanceInSats;
        this.send = (to, value, assetIn, options) => {
            const asset = assetIn || this.defaultAsset;
            if (!asset) {
                throw new Error(`Must provide an asset`);
            }
            return this.deferHandler().send(to, new bignumber_js_1.default(value.toString()), asset, options);
        };
        this.sendSats = (to, value, assetIn, options) => {
            const asset = assetIn || this.defaultAsset;
            if (!asset) {
                throw new Error(`Must provide an asset`);
            }
            return this.deferHandler().sendSats(to, new bignumber_js_1.default(value.toString()), asset, options);
        };
        this.deferHandler = (thisHandler) => {
            return {
                address: (deferredAsset, deferredOptions) => {
                    const nextHandler = this.findHandler(deferredAsset, thisHandler);
                    if (nextHandler.address) {
                        return nextHandler.address(deferredAsset, deferredOptions || {}, this.deferHandler(nextHandler));
                    }
                    else {
                        return this.deferHandler(nextHandler).address(deferredAsset, deferredOptions);
                    }
                },
                getBalance: (deferredAsset, deferredOptions) => {
                    const nextHandler = this.findHandler(deferredAsset, thisHandler);
                    if (nextHandler.getBalance) {
                        return nextHandler.getBalance(deferredAsset, deferredOptions || {}, this.deferHandler(nextHandler));
                    }
                    else {
                        return this.deferHandler(nextHandler).getBalance(deferredAsset, deferredOptions);
                    }
                },
                getBalanceInSats: (deferredAsset, deferredOptions) => {
                    const nextHandler = this.findHandler(deferredAsset, thisHandler);
                    if (nextHandler.getBalanceInSats) {
                        return nextHandler.getBalanceInSats(deferredAsset, deferredOptions || {}, this.deferHandler(nextHandler));
                    }
                    else {
                        return this.deferHandler(nextHandler).getBalanceInSats(deferredAsset, deferredOptions);
                    }
                },
                send: (deferredTo, deferredValue, deferredAsset, deferredOptions) => {
                    const nextHandler = this.findHandler(deferredAsset, thisHandler);
                    if (nextHandler.send) {
                        return nextHandler.send(deferredTo, deferredValue, deferredAsset, deferredOptions || {}, this.deferHandler(nextHandler));
                    }
                    else {
                        return this.deferHandler(nextHandler).send(deferredTo, deferredValue, deferredAsset, deferredOptions);
                    }
                },
                sendSats: (deferredTo, deferredValue, deferredAsset, deferredOptions) => {
                    const nextHandler = this.findHandler(deferredAsset, thisHandler);
                    if (nextHandler.sendSats) {
                        return nextHandler.sendSats(deferredTo, deferredValue, deferredAsset, deferredOptions || {}, this.deferHandler(nextHandler));
                    }
                    else {
                        return this.deferHandler(nextHandler).sendSats(deferredTo, deferredValue, deferredAsset, deferredOptions);
                    }
                },
            };
        };
        this.findHandler = (asset, from) => {
            const fromIndex = from
                ? this.handlers.findIndex((i) => i.handler === from)
                : -1;
            for (let i = (fromIndex === -1 ? this.handlers.length : fromIndex) - 1; i >= 0; i--) {
                const handler = this.handlers[i].handler;
                // console.log(handler);
                if (handler.handlesAsset(asset)) {
                    return handler;
                }
            }
            let assetString;
            try {
                assetString = JSON.stringify(asset);
            }
            catch (error) {
                assetString = (asset && asset.name) || asset;
            }
            throw new Error(`Unsupported asset ${assetString}`);
        };
        this.privateKey = utils_1.strip0x(Buffer.isBuffer(privateKey)
            ? privateKey.toString("hex")
            : privateKey); // Buffer.from(privateKey, "base64").toString("hex");
        this.network = (options && options.network) || "mainnet";
        this.constructorOptions = options;
        this.sharedState = {};
        this.registerHandler(BTCHandler_1.BTCHandler, 0);
        this.registerHandler(ZECHandler_1.ZECHandler, 10);
        this.registerHandler(BCHHandler_1.BCHHandler, 20);
        this.registerHandler(ETHHandler_1.ETHHandler, 30);
        this.registerHandler(FILHandler_1.FILHandler, 40);
        this.registerHandler(TERRAHandler_1.TERRAHandler, 50);
        this.registerHandler(ERC20Handler_1.ERC20Handler, 60);
        if (options && options.extraHandlers) {
            for (const handler of options.extraHandlers) {
                this.registerHandler(handler);
            }
        }
        this.defaultAsset = options && options.defaultAsset;
    }
}
exports.default = CryptoAccount;
CryptoAccount.newPrivateKey = () => {
    // @ts-ignore
    try {
        // @ts-ignore
        const array = new Uint32Array(32);
        // @ts-ignore
        window.crypto.getRandomBytes(array);
        return new Buffer(array).toString("hex");
    }
    catch (error) {
        // Ignore window error.
    }
    return require("crypto").randomBytes(32).toString("hex");
};
////////////////////////////////////////////////////////////////////////////////
// EXPORTS                                                                    //
// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //
////////////////////////////////////////////////////////////////////////////////
// tslint:disable: no-object-mutation
// tslint:disable-next-line: no-string-literal
CryptoAccount.default = CryptoAccount.CryptoAccount = CryptoAccount;
// AMD
try {
    // @ts-ignore
    if (typeof define === "function" && define.amd) {
        // @ts-ignore
        define(() => CryptoAccount);
    }
}
catch (error) {
    /* ignore */
}
// Node.js and other environments that support module.exports.
try {
    // @ts-ignore
    if (typeof module !== "undefined" && module.exports) {
        module.exports = CryptoAccount;
    }
}
catch (error) {
    /* ignore */
}
// Browser.
try {
    // @ts-ignore
    if (typeof window !== "undefined" && window) {
        // @ts-ignore
        window.CryptoAccount = CryptoAccount;
    }
}
catch (error) {
    /* ignore */
}
//# sourceMappingURL=data:application/json;base64,