"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZECHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const insight_1 = require("../../common/apis/insight");
const sochain_1 = require("../../common/apis/sochain");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
const jsonrpc_1 = require("../../common/apis/jsonrpc");
var InsightEndpoints;
(function (InsightEndpoints) {
    // Testnet
    InsightEndpoints["TestnetZCash"] = "https://explorer.testnet.z.cash/api/";
    // Mainnet
    InsightEndpoints["ZCash"] = "https://explorer.z.cash/api/";
    InsightEndpoints["ZecBlockExplorer"] = "https://zecblockexplorer.com/api/";
    InsightEndpoints["ZecChain"] = "https://zechain.net/api/v1/";
    InsightEndpoints["BlockExplorer"] = "https://zcash.blockexplorer.com/api/";
})(InsightEndpoints || (InsightEndpoints = {}));
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => testnet
        ? [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchUTXO(InsightEndpoints.TestnetZCash)(txHash, vOut)),
            () => sochain_1.Sochain.fetchUTXO("ZECTEST")(txHash, vOut),
        ]
        : [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchUTXO(InsightEndpoints.ZCash)(txHash, vOut), () => insight_1.Insight.fetchUTXO(InsightEndpoints.ZecBlockExplorer)(txHash, vOut)),
            () => insight_1.Insight.fetchUTXO(InsightEndpoints.ZecChain)(txHash, vOut),
            () => insight_1.Insight.fetchUTXO(InsightEndpoints.BlockExplorer)(txHash, vOut),
        ],
    fetchUTXOs: (testnet, address, confirmations) => testnet
        ? [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchUTXOs(InsightEndpoints.TestnetZCash)(address, confirmations)),
            () => sochain_1.Sochain.fetchUTXOs("ZECTEST")(address, confirmations),
        ]
        : [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZCash)(address, confirmations), () => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZecBlockExplorer)(address, confirmations)),
            () => sochain_1.Sochain.fetchUTXOs("ZEC")(address, confirmations),
            () => insight_1.Insight.fetchUTXOs(InsightEndpoints.ZecChain)(address, confirmations),
            () => insight_1.Insight.fetchUTXOs(InsightEndpoints.BlockExplorer)(address, confirmations),
        ],
    fetchTXs: (testnet, address, confirmations = 0) => testnet
        ? [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchTXs(InsightEndpoints.TestnetZCash)(address, confirmations)),
            () => sochain_1.Sochain.fetchTXs("ZECTEST")(address, confirmations),
        ]
        : [
            ...utils_1.shuffleArray(() => insight_1.Insight.fetchTXs(InsightEndpoints.ZCash)(address, confirmations), () => insight_1.Insight.fetchTXs(InsightEndpoints.ZecBlockExplorer)(address, confirmations)),
            () => sochain_1.Sochain.fetchTXs("ZEC")(address, confirmations),
            () => insight_1.Insight.fetchTXs(InsightEndpoints.ZecChain)(address, confirmations),
            () => insight_1.Insight.fetchTXs(InsightEndpoints.BlockExplorer)(address, confirmations),
        ],
    broadcastTransaction: (testnet, hex) => testnet
        ? [
            () => jsonrpc_1.JSONRPC.broadcastTransaction(jsonrpc_1.MULTICHAIN_URLS.ZECTEST)(hex),
            () => insight_1.Insight.broadcastTransaction(InsightEndpoints.TestnetZCash)(hex),
            () => sochain_1.Sochain.broadcastTransaction("ZECTEST")(hex),
        ]
        : [
            ...utils_1.shuffleArray(() => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZCash)(hex), () => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZecBlockExplorer)(hex), () => sochain_1.Sochain.broadcastTransaction("ZEC")(hex)),
            () => insight_1.Insight.broadcastTransaction(InsightEndpoints.ZecChain)(hex),
            () => insight_1.Insight.broadcastTransaction(InsightEndpoints.BlockExplorer)(hex),
            () => jsonrpc_1.JSONRPC.broadcastTransaction(jsonrpc_1.MULTICHAIN_URLS.ZEC)(hex),
        ],
};
class ZECHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["ZEC", "ZCASH"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await ZECHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: (options && options.address) || (await this.address(asset)) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await ZECHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress })))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                if (this.testnet) {
                    // tslint:disable-next-line: no-object-mutation
                    bitcoin.networks.zcashTest.consensusBranchId["4"] = 0xe9ff75a6;
                }
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this.testnet
                    ? bitcoin.networks.zcashTest
                    : bitcoin.networks.zcash, this.privateKey, changeAddress, to, valueIn, utxos, Object.assign(Object.assign({}, options), { version: 4, versionGroupID: 0x892f2085, consensusBranchId: 0xe9ff75a6 }));
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = async (txHash) => (await retry_1.fallback(
        // Fetch confirmations for first output of transaction.
        exports._apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations;
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.zcashTest : bitcoin.networks.zcash, privateKey);
    }
}
exports.ZECHandler = ZECHandler;
ZECHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    return retry_1.fallback(exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations));
};
ZECHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.fallback(endpoints);
};
ZECHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return retry_1.fallback(endpoints);
};
//# sourceMappingURL=data:application/json;base64,