"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BCHHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bchaddrjs_1 = require("bchaddrjs");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const bitcoinDotCom_1 = require("../../common/apis/bitcoinDotCom");
const blockchair_1 = require("../../common/apis/blockchair");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const jsonrpc_1 = require("../../common/apis/jsonrpc");
const toCashAddr = (legacyAddress) => {
    try {
        return bchaddrjs_1.toCashAddress(legacyAddress);
    }
    catch (error) {
        return legacyAddress;
    }
};
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchUTXO(testnet)(txHash, vOut),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchUTXO(blockchair_1.Blockchair.networks.BITCOIN_CASH)(txHash, vOut),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchUTXOs(testnet)(address, confirmations),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchUTXOs(blockchair_1.Blockchair.networks.BITCOIN_CASH)(address, confirmations),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchTXs(testnet)(address, confirmations),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchTXs(blockchair_1.Blockchair.networks.BITCOIN_CASH)(address, confirmations),
    ],
    broadcastTransaction: (testnet, hex) => [
        () => jsonrpc_1.JSONRPC.broadcastTransaction(testnet ? jsonrpc_1.MULTICHAIN_URLS.BCHTEST : jsonrpc_1.MULTICHAIN_URLS.BCH)(hex),
        () => bitcoinDotCom_1.BitcoinDotCom.broadcastTransaction(testnet)(hex),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.broadcastTransaction(blockchair_1.Blockchair.networks.BITCOIN_CASH)(hex),
    ],
};
class BCHHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["BCH", "BITCOIN CASH", "BCASH", "BITCOINCASH", "BITCOIN-CASH"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => toCashAddr(this.privateKey.getAddress());
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await BCHHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: (options && options.address) || (await this.address(asset)) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = bchaddrjs_1.toLegacyAddress(await this.address(asset));
                const toAddress = bchaddrjs_1.toLegacyAddress(to);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await BCHHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress })))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this._bitgoNetwork(), this.privateKey, changeAddress, toAddress, valueIn, utxos, Object.assign(Object.assign({}, options), { signFlag: 
                    // bitcoin.Transaction.SIGHASH_ALL |
                    // tslint:disable-next-line: no-bitwise
                    bitcoin.Transaction.SIGHASH_SINGLE |
                        bitcoin.Transaction.SIGHASH_BITCOINCASHBIP143 }));
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = async (txHash) => (await retry_1.fallback(
        // Fetch confirmations for first output of transaction.
        exports._apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations;
        this._bitgoNetwork = () => this.testnet
            ? bitcoin.networks.bitcoincashTestnet
            : bitcoin.networks.bitcoincash;
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this._bitgoNetwork(), privateKey);
    }
}
exports.BCHHandler = BCHHandler;
BCHHandler.getUTXOs = async (testnet, options) => {
    const address = toCashAddr(options.address);
    const confirmations = options.confirmations || 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, address, confirmations);
    const utxos = await retry_1.fallback(endpoints);
    return utxos;
};
BCHHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.fallback(endpoints);
};
BCHHandler.getTransactions = async (testnet, options) => {
    const address = toCashAddr(options.address);
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, address, confirmations);
    return retry_1.fallback(endpoints);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkNISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9CQ0gvQkNISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQTBDO0FBRTFDLHlDQUEyRDtBQUMzRCxnRUFBcUM7QUFDckMseUNBQWlDO0FBRWpDLG1FQUFnRTtBQUNoRSw2REFBMEQ7QUFDMUQsc0VBQW1FO0FBQ25FLDJEQUFtRTtBQUNuRSxxREFBaUU7QUFDakUsMkNBQXdEO0FBR3hELHVEQUFxRTtBQVlyRSxNQUFNLFVBQVUsR0FBRyxDQUFDLGFBQXFCLEVBQUUsRUFBRTtJQUN6QyxJQUFJO1FBQ0EsT0FBTyx5QkFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3ZDO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLGFBQWEsQ0FBQztLQUN4QjtBQUNMLENBQUMsQ0FBQztBQUVXLFFBQUEsYUFBYSxHQUFHO0lBQ3pCLFNBQVMsRUFBRSxDQUFDLE9BQWdCLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFLENBQUM7UUFDM0QsR0FBRyxFQUFFLENBQUMsNkJBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztRQUNwRCxPQUFPO1lBQ0gsQ0FBQyxDQUFDLFNBQVM7WUFDWCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQ0QsdUJBQVUsQ0FBQyxTQUFTLENBQUMsdUJBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ2xELE1BQU0sRUFDTixJQUFJLENBQ1A7S0FDZDtJQUVELFVBQVUsRUFBRSxDQUFDLE9BQWdCLEVBQUUsT0FBZSxFQUFFLGFBQXFCLEVBQUUsRUFBRSxDQUFDO1FBQ3RFLEdBQUcsRUFBRSxDQUFDLDZCQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7UUFD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