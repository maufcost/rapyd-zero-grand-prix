"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TERRAHandler = exports.TerraNetwork = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const terra_js_1 = require("@terra-money/terra.js");
const promiEvent_1 = require("../../lib/promiEvent");
const utils_1 = require("../../lib/utils");
var TerraNetwork;
(function (TerraNetwork) {
    TerraNetwork["Tequila"] = "tequila-0004";
    TerraNetwork["Columbus"] = "columbus-3";
})(TerraNetwork = exports.TerraNetwork || (exports.TerraNetwork = {}));
const toDenom = (asset) => terra_js_1.Denom.LUNA;
class TERRAHandler {
    constructor(privateKey, network, options = {}, sharedState) {
        this.decimals = 6;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["LUNA"].indexOf(asset.toUpperCase()) !== -1;
        this.address = (asset, _options = {}) => {
            if (!this.handlesAsset(asset)) {
                throw new Error(`Asset ${asset} not supported.`);
            }
            return this.key.accAddress;
        };
        // Balance
        this.getBalance = async (asset, options = {}) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options = {}) => {
            if (!this.handlesAsset(asset)) {
                throw new Error(`Asset ${asset} not supported.`);
            }
            const balances = (await this.client.bank.balance((options && options.address) || (await this.address(asset)))).get(toDenom(asset));
            return new bignumber_js_1.default(balances ? balances.amount.toFixed() : 0);
        };
        // Transfer
        this.send = (to, value, asset, options = {}) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, value, asset, options = {}) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const address = await this.address(asset);
                const send = new terra_js_1.MsgSend(address, to, { uluna: value.toFixed() });
                const signedTx = await this.wallet.createAndSignTx({
                    msgs: [send],
                    memo: options.memo,
                });
                const result = await this.client.tx.broadcast(signedTx);
                const txHash = result.txhash;
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        this.network =
            network === "mainnet"
                ? TerraNetwork.Columbus
                : TerraNetwork.Tequila;
        const client = sharedState.client ||
            new terra_js_1.LCDClient({
                URL: options && options.terra ? options.terra.URL : "",
                chainID: this.network,
            });
        const key = new terra_js_1.RawKey(Buffer.from(utils_1.strip0x(privateKey), "hex"));
        const wallet = client.wallet(key);
        this.client = client;
        this.wallet = wallet;
        this.key = key;
    }
}
exports.TERRAHandler = TERRAHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVEVSUkFIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hhbmRsZXJzL1RFUlJBL1RFUlJBSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFDckMsb0RBTStCO0FBRS9CLHFEQUFpRTtBQUVqRSwyQ0FBMEM7QUFFMUMsSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3BCLHdDQUF3QixDQUFBO0lBQ3hCLHVDQUF1QixDQUFBO0FBQzNCLENBQUMsRUFIVyxZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQUd2QjtBQWdCRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsZ0JBQUssQ0FBQyxJQUFJLENBQUM7QUFFOUMsTUFBYSxZQUFZO0lBV3JCLFlBQ0ksVUFBa0IsRUFDbEIsT0FBZSxFQUNmLFVBQThCLEVBQUUsRUFDaEMsV0FBaUI7UUFWSixhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBaUM5QixtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFLENBQ3JELE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFakMsWUFBTyxHQUFHLENBQ3RCLEtBQVksRUFDWixXQUEyQixFQUFFLEVBQ3ZCLEVBQUU7WUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsQ0FBQzthQUNwRDtZQUVELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBRUYsVUFBVTtRQUNNLGVBQVUsR0FBRyxLQUFLLEVBQzlCLEtBQVksRUFDWixV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