"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryNTimes = exports.fallback = exports.onlyTestnet = exports.onlyMainnet = exports.extractError = exports.sleep = void 0;
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
exports.sleep = sleep;
const extractError = (error) => {
    if (error && typeof error === "object") {
        if (error.response) {
            return exports.extractError(error.response);
        }
        if (error.error) {
            return exports.extractError(error.error);
        }
        if (error.message) {
            return exports.extractError(error.message);
        }
        if (error.data) {
            return exports.extractError(error.data);
        }
        if (error.context) {
            return exports.extractError(error.context);
        }
        if (error.statusText) {
            return exports.extractError(error.statusText);
        }
        try {
            return JSON.stringify(error);
        }
        catch (error) {
            // Ignore JSON error
        }
    }
    // Remove `Error: ` prefix.
    try {
        if (typeof error === "string") {
            if (error.slice(0, 7).toLowerCase() === "Error: ") {
                // tslint:disable-next-line: no-parameter-reassignment
                error = error.slice(7);
            }
            return error;
        }
        return JSON.stringify(error);
    }
    catch (error) {
        // Ignore JSON error
    }
    return String(error);
};
exports.extractError = extractError;
const onlyMainnet = (x, testnet) => testnet ? undefined : x;
exports.onlyMainnet = onlyMainnet;
const onlyTestnet = (x, testnet) => testnet ? x : undefined;
exports.onlyTestnet = onlyTestnet;
const fallback = async (fallbacks) => {
    let firstError;
    for (const fn of fallbacks) {
        if (!fn) {
            continue;
        }
        try {
            return await fn();
        }
        catch (error) {
            firstError = firstError || error;
        }
    }
    throw firstError || new Error("No result returned");
};
exports.fallback = fallback;
const retryNTimes = async (fnCall, retries) => {
    let returnError;
    for (let i = 0; i < retries; i++) {
        try {
            return await fnCall();
        }
        catch (error) {
            if (String(error).match(/timeout of .* exceeded/)) {
                returnError = error;
            }
            else {
                const errorMessage = exports.extractError(error);
                if (errorMessage) {
                    // tslint:disable-next-line: no-object-mutation
                    error.message += ` (${errorMessage})`;
                }
                throw error;
            }
        }
        await exports.sleep(500);
    }
    throw returnError;
};
exports.retryNTimes = retryNTimes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3JldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLE1BQU0sS0FBSyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDaEMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUR6QyxRQUFBLEtBQUssU0FDb0M7QUFFL0MsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFVLEVBQVUsRUFBRTtJQUMvQyxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDcEMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDYixPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2YsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0QztRQUNELElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtZQUNaLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDZixPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ2xCLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJO1lBQ0EsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NB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