{"version":3,"sources":["../src/filecoin.ts"],"names":["LotusRpcEngine","FilecoinNumber","checkAddressString","Message","computeGasToBurn","KNOWN_TYPE_0_ADDRESS","KNOWN_TYPE_1_ADDRESS","KNOWN_TYPE_3_ADDRESS","allCallsExitWithCode0","BigNumber","Filecoin","constructor","provider","config","apiAddress","address","balance","jsonRpcEngine","request","message","res","signature","Error","signedMessage","Signature","Type","Data","nonce","Number","err","toLowerCase","includes","clonedMsg","Object","assign","From","networkPrefix","cloneMsgWOnChainFromAddr","feeCap","gasLimit","numBlocksIncluded","gasPremium","GasLimit","maxFee","toAttoFil","To","Value","GasPremium","GasFeeCap","Method","Nonce","Params","MaxFee","toAddressWithCorrectPrefix","slice","to","from","value","gasFeeCap","method","params","msgWithGas","gasEstimateMessageGas","toLotusType","limit","times","baseFee","gasUsed","gasFeeCapBN","gasPremiumBN","gasLimitBN","baseFeeBN","gasUsedBN","gasToBurn","totalGas","plus","minBaseFeeFeeCap","minimum","leftSide","minTip","minus","rightSide","maximum","wallet"],"mappings":"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","sourcesContent":["import LotusRpcEngine, { LotusRpcEngineConfig } from '@glif/filecoin-rpc-client'\nimport { FilecoinNumber } from '@glif/filecoin-number'\nimport { checkAddressString, Network } from '@glif/filecoin-address'\nimport { LotusMessage, Message } from '@glif/filecoin-message'\nimport {\n  computeGasToBurn,\n  KNOWN_TYPE_0_ADDRESS,\n  KNOWN_TYPE_1_ADDRESS,\n  KNOWN_TYPE_3_ADDRESS,\n  allCallsExitWithCode0,\n} from './utils'\nimport { BigNumber } from 'bignumber.js'\nimport { WalletSubProvider } from './wallet-sub-provider'\nimport { InvocResult, CID } from './types'\n\nexport class Filecoin {\n  public wallet: WalletSubProvider\n  public jsonRpcEngine: LotusRpcEngine\n\n  constructor(\n    provider: WalletSubProvider,\n    config: LotusRpcEngineConfig = {\n      apiAddress: 'http://127.0.0.1:1234/rpc/v0',\n    },\n  ) {\n    if (!provider) throw new Error('No provider provided.')\n    this.wallet = provider\n    this.jsonRpcEngine = new LotusRpcEngine(config)\n  }\n\n  getBalance = async (address: string): Promise<FilecoinNumber> => {\n    checkAddressString(address)\n    const balance = await this.jsonRpcEngine.request<string>(\n      'WalletBalance',\n      address,\n    )\n    return new FilecoinNumber(balance, 'attofil')\n  }\n\n  simulateMessage = async (message: LotusMessage): Promise<boolean> => {\n    const res = await this.jsonRpcEngine.request<InvocResult>(\n      'StateCall',\n      message,\n      null,\n    )\n    return allCallsExitWithCode0(res)\n  }\n\n  sendMessage = async (\n    message: LotusMessage,\n    signature: string,\n  ): Promise<CID> => {\n    if (!message) throw new Error('No message provided.')\n    if (!signature) throw new Error('No signature provided.')\n    const signedMessage = {\n      Message: message,\n      Signature: {\n        // wallet only supports secp256k1 keys for now\n        Type: 1,\n        Data: signature,\n      },\n    }\n\n    return this.jsonRpcEngine.request<{ '/': string }>(\n      'MpoolPush',\n      signedMessage,\n    )\n  }\n\n  getNonce = async (address: string): Promise<number> => {\n    if (!address) throw new Error('No address provided.')\n    checkAddressString(address)\n    try {\n      const nonce = Number(\n        await this.jsonRpcEngine.request('MpoolGetNonce', address),\n      )\n      return nonce\n    } catch (err) {\n      if (\n        err &&\n        err.message &&\n        err.message.toLowerCase().includes('actor not found')\n      )\n        return 0\n      throw new Error(err)\n    }\n  }\n\n  cloneMsgWOnChainFromAddr = async (\n    message: LotusMessage,\n  ): Promise<LotusMessage> => {\n    const clonedMsg = Object.assign({}, message)\n    try {\n      // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure\n      await this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null)\n    } catch (err) {\n      // if from actor doesnt exist, use a hardcoded known actor address\n      if (err.message.toLowerCase().includes('actor not found')) {\n        const networkPrefix = clonedMsg.From[0] as Network\n\n        if (!clonedMsg.From)\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        if (clonedMsg.From[1] === '0')\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        else if (clonedMsg.From[1] === '1')\n          clonedMsg.From = KNOWN_TYPE_1_ADDRESS[networkPrefix]\n        else if (clonedMsg.From[1] === '3')\n          clonedMsg.From = KNOWN_TYPE_3_ADDRESS[networkPrefix]\n        else {\n          // this should never happen, only t1 and t3 addresses can be used as a from?\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[networkPrefix]\n        }\n      }\n    }\n    return clonedMsg\n  }\n\n  gasEstimateFeeCap = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const feeCap = await this.jsonRpcEngine.request<string>(\n      'GasEstimateFeeCap',\n      clonedMsg,\n      0,\n      null,\n    )\n\n    return new FilecoinNumber(feeCap, 'attofil')\n  }\n\n  gasEstimateGasLimit = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasLimit = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasLimit',\n      clonedMsg,\n      null,\n    )\n\n    return new FilecoinNumber(gasLimit, 'attofil')\n  }\n\n  gasEstimateGasPremium = async (\n    message: LotusMessage,\n    numBlocksIncluded: number = 0,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasPremium = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasPremium',\n      numBlocksIncluded,\n      clonedMsg.From,\n      clonedMsg.GasLimit || 0,\n      null,\n    )\n\n    return new FilecoinNumber(gasPremium, 'attofil')\n  }\n\n  gasEstimateMessageGas = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<Message> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const {\n      To,\n      Value,\n      GasPremium,\n      GasFeeCap,\n      GasLimit,\n      Method,\n      Nonce,\n      Params,\n    } = await this.jsonRpcEngine.request(\n      'GasEstimateMessageGas',\n      clonedMsg,\n      { MaxFee: maxFee },\n      null,\n    )\n\n    // this is a hack to get by weird UI bugs where f addresses convert to t addresses\n    const toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1)\n    return new Message({\n      to: toAddressWithCorrectPrefix,\n      from: message.From,\n      value: Value,\n      gasPremium: GasPremium,\n      gasFeeCap: GasFeeCap,\n      gasLimit: GasLimit,\n      method: Method,\n      nonce: Nonce,\n      params: Params,\n    })\n  }\n\n  gasEstimateMaxFee = async (\n    message: LotusMessage,\n  ): Promise<{ maxFee: FilecoinNumber; message: LotusMessage }> => {\n    const msgWithGas = (await this.gasEstimateMessageGas(message)).toLotusType()\n    const feeCap = new BigNumber(msgWithGas.GasFeeCap)\n    const limit = new BigNumber(msgWithGas.GasLimit)\n    return {\n      maxFee: new FilecoinNumber(feeCap.times(limit), 'attofil'),\n      message: msgWithGas,\n    }\n  }\n\n  /**\n   * formula (some of these variable names might not be the best...):\n   * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))\n   *\n   * minBaseFeeFeeCap = min(BaseFee, FeeCap)\n   * totalGas = GasUsed+GasToBurn\n   * leftSide = totalGas*minBaseFeeFeeCap\n   *\n   * minTip = min(FeeCap-BaseFee, GasPremium)\n   * rightSide = gasLimit*max(0, minTip)\n   *\n   * paidByMessageSender =\n   * leftSide + rightSide\n   */\n  gasCalcTxFee = async (\n    gasFeeCap: string,\n    gasPremium: string,\n    gasLimit: number,\n    baseFee: string,\n    gasUsed: string,\n  ): Promise<FilecoinNumber> => {\n    const gasFeeCapBN = new BigNumber(gasFeeCap)\n    const gasPremiumBN = new BigNumber(gasPremium)\n    const gasLimitBN = new BigNumber(gasLimit)\n    const baseFeeBN = new BigNumber(baseFee)\n    const gasUsedBN = new BigNumber(gasUsed)\n\n    /* compute left side */\n    const gasToBurn = computeGasToBurn(gasUsedBN, gasLimitBN)\n    const totalGas = gasUsedBN.plus(gasToBurn)\n    const minBaseFeeFeeCap = BigNumber.minimum(baseFeeBN, gasFeeCapBN)\n    const leftSide = totalGas.times(minBaseFeeFeeCap)\n\n    /* compute right side */\n    const minTip = BigNumber.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN)\n    const rightSide = gasLimitBN.times(BigNumber.maximum(0, minTip))\n\n    return new FilecoinNumber(leftSide.plus(rightSide), 'attofil')\n  }\n}\n"],"file":"filecoin.js"}